import requests
import json
import unittest
import mysql
import xlrd
import xlwt
import datetime
from mysql import connector
from AutomationScripts.Config import Api
from itertools import combinations


class Auto_Evaluation(unittest.TestCase):
    def test_Auto_Evaluation(self):
        # --------------------------------------------------------------------------------------------------------------
        # CSS to differentiate Correct and Wrong data in Excel
        # --------------------------------------------------------------------------------------------------------------
        self.__style0 = xlwt.easyxf('font: name Times New Roman, color-index black, bold on')
        self.__style1 = xlwt.easyxf('font: name Times New Roman, color-index black, bold off')
        self.__style2 = xlwt.easyxf('font: name Times New Roman, color-index red, bold on')
        self.__style3 = xlwt.easyxf('font: name Times New Roman, color-index green, bold on')

        # --------------------------------------------------------------------------------------------------------------
        # Read from Excel
        # --------------------------------------------------------------------------------------------------------------
        wb = xlrd.open_workbook("/home/muttumurgan/Desktop/PythonWorkingScripts/InputData/Assessment/Evaluation_Check.xls")
        wb_result = xlwt.Workbook()
        ws = wb_result.add_sheet('Evaluation_Check')
        sheetname = wb.sheet_names()  # Read for XLS Sheet names
        sh1 = wb.sheet_by_index(0)
        rows = sh1.row_values(0)
        QuestionId_1 = int(rows[5])
        QuestionId_2 = int(rows[6])
        QuestionId_3 = int(rows[8])
        QuestionId_4 = int(rows[9])
        QuestionId_5 = int(rows[11])
        QuestionId_6 = int(rows[12])
        QuestionId_7 = int(rows[13])
        question_ids = [QuestionId_1, QuestionId_2, QuestionId_3, QuestionId_4, QuestionId_5, QuestionId_6,
                        QuestionId_7]

        # --------------------------------------------------------------------------------------------------------------
        # Header printing in Output Excel
        # --------------------------------------------------------------------------------------------------------------
        ws.write(0, 0, "Candidate Id", self.__style0)
        ws.write(0, 1, "Login Name", self.__style0)
        ws.write(0, 2, "Password", self.__style0)
        ws.write(0, 3, "Test Id", self.__style0)
        ws.write(0, 4, "Section 1 Id", self.__style0)
        ws.write(0, 5, QuestionId_1, self.__style0)
        ws.write(0, 6, QuestionId_2, self.__style0)
        ws.write(0, 7, "Section 2 Id", self.__style0)
        ws.write(0, 8, QuestionId_3, self.__style0)
        ws.write(0, 9, QuestionId_4, self.__style0)
        ws.write(0, 10, "Section 3 Id", self.__style0)
        ws.write(0, 11, QuestionId_5, self.__style0)
        ws.write(0, 12, QuestionId_6, self.__style0)
        ws.write(0, 13, QuestionId_7, self.__style0)
        ws.write(0, 14, "Expected_Sec_1_Total", self.__style0)
        ws.write(0, 15, "Actual_Sec_1_Total", self.__style0)
        ws.write(0, 16, "Expected_Sec_2_Total", self.__style0)
        ws.write(0, 17, "Actual_Sec_2_Total", self.__style0)
        ws.write(0, 18, "Expected_Sec_3_Total", self.__style0)
        ws.write(0, 19, "Actual_Sec_3_Total", self.__style0)
        ws.write(0, 20, "Expected_Grp_1_Total", self.__style0)
        ws.write(0, 21, "Actual_Grp_1_Total", self.__style0)
        ws.write(0, 22, "Expected_Grp_2_Total", self.__style0)
        ws.write(0, 23, "Actual_Grp_2_Total", self.__style0)
        ws.write(0, 24, "Expected_test_Total", self.__style0)
        ws.write(0, 25, "Actual_test_Total", self.__style0)
        ws.write(0, 26, "Expected Percentage", self.__style0)
        ws.write(0, 27, "Actual Percentage", self.__style0)
        ws.write(0, 28, "Expected Q1 Marks", self.__style0)
        ws.write(0, 29, "Actual Q1 Marks", self.__style0)
        ws.write(0, 30, "Expected Q2 Marks", self.__style0)
        ws.write(0, 31, "Actual Q2 Marks", self.__style0)
        ws.write(0, 32, "Expected Q3 Marks", self.__style0)
        ws.write(0, 33, "Actual Q3 Marks", self.__style0)
        ws.write(0, 34, "Expected Q4 Marks", self.__style0)
        ws.write(0, 35, "Actual Q4 Marks", self.__style0)
        ws.write(0, 36, "Expected Q5 Marks", self.__style0)
        ws.write(0, 37, "Actual Q5 Marks", self.__style0)
        ws.write(0, 38, "Expected Q6 Marks", self.__style0)
        ws.write(0, 39, "Actual Q6 Marks", self.__style0)
        ws.write(0, 40, "Expected Q7 Marks", self.__style0)
        ws.write(0, 41, "Actual Q7 Marks", self.__style0)

        n = 1
        rownum = n
        while n < sh1.nrows:
            rows = sh1.row_values(rownum)
            candidateId = int(rows[0])
            loginName = rows[1]
            Passwords = rows[2]
            TestId = int(rows[3])
            SectionId_1 = int(rows[4])
            SectionId_2 = int(rows[7])
            SectionId_3 = int(rows[10])
            QuestionId_1_Ans = rows[5]
            QuestionId_2_Ans = rows[6]
            QuestionId_3_Ans = rows[8]
            QuestionId_4_Ans = rows[9]
            QuestionId_5_Ans = rows[11]
            QuestionId_6_Ans = rows[12]
            QuestionId_7_Ans = rows[13]
            Expected_Sec_1_Total = rows[14]
            Expected_Sec_2_Total = rows[16]
            Expected_Sec_3_Total = rows[18]
            Expected_Grp_1_Total = rows[20]
            Expected_Grp_2_Total = rows[22]
            Expected_test_Total = rows[24]
            Expected_Percentage = rows[26]
            Expected_Q1_Marks = rows[28]
            Expected_Q2_Marks = rows[30]
            Expected_Q3_Marks = rows[32]
            Expected_Q4_Marks = rows[34]
            Expected_Q5_Marks = rows[36]
            Expected_Q6_Marks = rows[38]
            Expected_Q7_Marks = rows[40]

            # ----------------------------------------------------------------------------------------------------------
            # Candidate data printing from Input data excel to Output data Excel
            # ----------------------------------------------------------------------------------------------------------
            ws.write(rownum, 0, candidateId)
            ws.write(rownum, 1, loginName)
            ws.write(rownum, 2, Passwords)
            ws.write(rownum, 3, TestId)
            ws.write(rownum, 4, SectionId_1)
            ws.write(rownum, 5, QuestionId_1_Ans)
            ws.write(rownum, 6, QuestionId_2_Ans)
            ws.write(rownum, 7, SectionId_2)
            ws.write(rownum, 8, QuestionId_3_Ans)
            ws.write(rownum, 9, str(QuestionId_4_Ans))
            ws.write(rownum, 10, SectionId_3)
            ws.write(rownum, 11, QuestionId_5_Ans)
            ws.write(rownum, 12, QuestionId_6_Ans)
            ws.write(rownum, 13, QuestionId_7_Ans)
            ws.write(rownum, 14, Expected_Sec_1_Total)
            ws.write(rownum, 16, Expected_Sec_2_Total)
            ws.write(rownum, 18, Expected_Sec_3_Total)
            ws.write(rownum, 20, Expected_Grp_1_Total)
            ws.write(rownum, 22, Expected_Grp_2_Total)
            ws.write(rownum, 24, Expected_test_Total)
            ws.write(rownum, 26, Expected_Percentage)
            ws.write(rownum, 28, Expected_Q1_Marks)
            ws.write(rownum, 30, Expected_Q2_Marks)
            ws.write(rownum, 32, Expected_Q3_Marks)
            ws.write(rownum, 34, Expected_Q4_Marks)
            ws.write(rownum, 36, Expected_Q5_Marks)
            ws.write(rownum, 38, Expected_Q6_Marks)
            ws.write(rownum, 40, Expected_Q7_Marks)

            # ----------------------------------------------------------------------------------------------------------
            # Login to HTML Test/Online Assessment
            # ----------------------------------------------------------------------------------------------------------
            header1 = {"content-type": "application/json"}
            data1 = {"ClientSystemInfo": "Browser:chrome/60.0.3112.78,OS:Linux x86_64,IPAddress:10.0.3.83",
                     "IPAddress": "10.0.3.83", "IsOnlinePreview": False, "LoginName": loginName,
                     "Password": Passwords,
                     "TenantAlias": "crpodemo"}
            request1 = requests.post("https://amsin.hirepro.in/py/assessment/htmltest/api/v2/login_to_test/",
                                     headers=header1, data=json.dumps(data1), verify=True)
            self.Test_Login_response = request1.json()
            self.Test_Login_TokenVal = self.Test_Login_response.get("Token")

            # ----------------------------------------------------------------------------------------------------------
            # Load Test API call
            # ----------------------------------------------------------------------------------------------------------
            header2 = {"content-type": "application/json", "X-AUTH-TOKEN": self.Test_Login_TokenVal}



            # ----------------------------------------------------------------------------------------------------------
            #  Submit Test API Call
            # ----------------------------------------------------------------------------------------------------------


            data4 = {"isPartialSubmission": False, "totalTimeSpent": 225,
                        "testResultCollection": [{"q": QuestionId_1, "timeSpent": 206, "secId": SectionId_1, "a": QuestionId_1_Ans},
                                                 {"q": QuestionId_2, "timeSpent": 1, "secId": SectionId_1, "a": QuestionId_2_Ans},
                                                 {"q": QuestionId_3, "timeSpent": 1, "secId": SectionId_2, "a": QuestionId_3_Ans},
                                                 {"q": QuestionId_4, "timeSpent": 3, "secId": SectionId_2, "a": QuestionId_4_Ans},
                                                 {"q": QuestionId_5, "timeSpent": 1, "secId": SectionId_3, "a": QuestionId_5_Ans},
                                                 {"q": QuestionId_6, "timeSpent": 1, "secId": SectionId_3, "a": QuestionId_6_Ans},
                                                 {"q": QuestionId_7, "timeSpent": 12, "secId": SectionId_3, "a": QuestionId_7_Ans}],
                        "config": "{\"TimeStamp\":\"2018-03-13T07:28:55.933Z\"}"}

            request4 = requests.post("https://amsin.hirepro.in/py/assessment/htmltest/api/v1/submitTestResult/",
                                     headers=header2,
                                     data=json.dumps(data4, default=str), verify=True)
            submit_test_response = json.loads(request4.content)

            # ----------------------------------------------------------------------------------------------------------
            #  Login to AMS
            # ----------------------------------------------------------------------------------------------------------


            header = {"content-type": "application/json"}
            data0 = {"LoginName": "demo", "Password": "demo123", "TenantAlias": "crpodemo",
                     "UserName": "demo"}
            response = requests.post(Api.login_user, headers=header, data=json.dumps(data0), verify=True)
            self.TokenVal = response.json()

            # ----------------------------------------------------------------------------------------------------------
            #  Evaluate online assessment for candidate
            # ----------------------------------------------------------------------------------------------------------
            header3 = {"content-type": "application/json", "X-AUTH-TOKEN": self.TokenVal.get("Token")}
            data5 = {"testId": TestId, "candidateIds": [candidateId]}
            request5 = requests.post("https://amsin.hirepro.in/py/assessment/eval/api/v1/eval-online-assessment/",
                                     headers=header3,
                                     data=json.dumps(data5, default=str), verify=True)
            evaluateTest_response = json.loads(request5.content)
            # print evaluateTest_response

            # ----------------------------------------------------------------------------------------------------------
            #  Fetch question wise candidate marks from DB and match with expected
            # ----------------------------------------------------------------------------------------------------------
            try:
                conn = mysql.connector.connect(host='35.154.36.218',
                                               database='appserver_core',
                                               user='hireprouser',
                                               password='tech@123')
                cursor = conn.cursor()
                cursor.execute("select id from Test_users where test_id = 5251 and candidate_id = %d;" % candidateId)
                test_user_id = cursor.fetchone()
                cursor.execute(
                    "select question_id, obtained_marks from test_results where testuser_id = %d;" % test_user_id)
                data = cursor.fetchall()
                data_length = len(data)
                j = 0

                col = 29
                Expectedcell = 28
                while (j <= len(question_ids)):
                    i = 0
                    while (i <= data_length):
                        if (question_ids[j] == data[i][0]):
                            if (rows[Expectedcell] == data[i][1]):
                                ws.write(rownum, col, data[i][1], self.__style3)
                            else:
                                ws.write(rownum, col, data[i][1], self.__style2)
                                print "Question -- Candidate_Id - ", candidateId, "Question_Id - ", question_ids[j], "Expected_Marks - ", \
                                rows[Expectedcell], "Actual_Marks - ", data[i][1]
                            break
                        i += 1
                    j += 1
                    col += 2
                    Expectedcell += 2
                conn.commit()
            except:
                print
            finally:
                conn.close()

            # ----------------------------------------------------------------------------------------------------------
            #  View candidate scores by Candidate Id
            # ----------------------------------------------------------------------------------------------------------
            header3 = {"content-type": "application/json", "X-AUTH-TOKEN": self.TokenVal.get("Token")}
            data6 = {"TestId": TestId, "CandidateId": candidateId, "TenantId": "FAqn1ztq4HI="}  # ObjVQ7rmWZg=
            request6 = requests.post(
                "https://amsin.hirepro.in/amsweb//JSONServices/JSONAssessmentManagementService.svc/ViewCandidateScoreByCandidateId",
                headers=header3,
                data=json.dumps(data6, default=str), verify=True)
            transcript_response = json.loads(request6.content)['CandidateScore']['TotalCandidateScore']
            # print transcript_response

            # ----------------------------------------------------------------------------------------------------------
            #  Entering Actual data in excel and compairing Expected and Actual result
            # ----------------------------------------------------------------------------------------------------------
            k = 0
            while (k <= 4):
                if (json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['GroupId'] == 12842):
                    Actual_Group1_Score = json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['Score']
                    if (Expected_Grp_1_Total == Actual_Group1_Score):
                        ws.write(rownum, 21, Actual_Group1_Score, self.__style3)
                    else:
                        ws.write(rownum, 21, Actual_Group1_Score, self.__style2)
                        Group_1_Id = json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['GroupId']
                        print "Group -- Candidate_Id - ", candidateId, " Group_1_Id - ", Group_1_Id, "Expected Score - ", Expected_Grp_1_Total, "Actual Score - ", Actual_Group1_Score
                    break
                k += 1
            k = 0
            while (k <= 4):
                if (json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['GroupId'] == 46832):
                    Actual_Section1_Score = json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['Score']
                    if (Expected_Sec_1_Total == Actual_Section1_Score):
                        ws.write(rownum, 15, Actual_Section1_Score, self.__style3)
                    else:
                        ws.write(rownum, 15, Actual_Section1_Score, self.__style2)
                        Section_1_Id = json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['GroupId']
                        print "Section -- Candidate_Id - ", candidateId, " Section_1_Id - ", Section_1_Id, " Expected Score - ", Expected_Sec_1_Total, " Actual Score - ", Actual_Section1_Score
                    break
                k += 1
            k = 0
            while (k <= 4):
                if (json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['GroupId'] == 12843):
                    Actual_Group2_Score = json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k][
                        'Score']
                    if (Expected_Grp_2_Total == Actual_Group2_Score):
                        ws.write(rownum, 23, Actual_Group2_Score, self.__style3)
                    else:
                        ws.write(rownum, 23, Actual_Group2_Score, self.__style2)
                        Group_2_Id = json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['GroupId']
                        print "Group -- Candidate_Id - ", candidateId, " Group_2_Id - ", Group_2_Id, "Expected Score - ", Expected_Grp_2_Total, "Actual Score - ", Actual_Group2_Score
                    break
                k += 1
            k = 0
            while (k <= 4):
                if (json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['GroupId'] == 46833):
                    Actual_Section2_Score = json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['Score']
                    if (Expected_Sec_2_Total == Actual_Section2_Score):
                        ws.write(rownum, 17, Actual_Section2_Score, self.__style3)
                    else:
                        ws.write(rownum, 17, Actual_Section2_Score, self.__style2)
                        Section_2_Id = json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['GroupId']
                        print "Section -- Candidate_Id - ", candidateId, " Section_2_Id - ", Section_2_Id, " Expected Score - ", Expected_Sec_2_Total, " Actual Score - ", Actual_Section2_Score
                    break
                k += 1
            k = 0
            while (k <= 4):
                if (json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k]['GroupId'] == 46834):
                    Actual_Section3_Score = json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k][
                        'Score']
                    if (Expected_Sec_3_Total == Actual_Section3_Score):
                        ws.write(rownum, 19, Actual_Section3_Score, self.__style3)
                    else:
                        ws.write(rownum, 19, Actual_Section3_Score, self.__style2)
                        Section_3_Id = json.loads(request6.content)['CandidateScore']['TotalCandidateScore'][k][
                            'GroupId']
                        print "Section -- Candidate_Id - ", candidateId, " Section_3_Id - ", Section_3_Id, " Expected Score - ", Expected_Sec_3_Total, " Actual Score - ", Actual_Section3_Score
                    break
                k += 1
            Actual_Test_Score = Actual_Group1_Score + Actual_Group2_Score
            if (Expected_test_Total == Actual_Test_Score):
                ws.write(rownum, 25, Actual_Test_Score, self.__style3)
            else:
                ws.write(rownum, 25, Actual_Test_Score, self.__style2)
                print "Section -- Candidate_Id - ", candidateId, " Test Id - ", TestId, " Expected Test Score - ", Expected_test_Total, " Actual Test Score - ", Actual_Test_Score
            wb_result.save(
                "/home/muttumurgan/Desktop/PythonWorkingScripts/OutputData/Assessment/Evaluation/Result_Evaluation_Check.xls")
            n += 1
            rownum += 1
